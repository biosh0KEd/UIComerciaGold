@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@inject PaginaActual paginaActual
@inject PaginasAbiertas paginasAbiertas

<div class="page">     
    <div class ="rc-header"> 
        <img class="rc-logo" src="images/ComerciaGoldLogo.PNG" alt="Logo"/>
        <div class="rc-user">
            Efrain Girón Romero
            <button type="button" class="btn btn-secondary btn-sm">Cerrar Sesión</button>
        </div>
    </div>
    <div class="rc-content">
        <div class="sidebar">
        <NavMenu/>
        </div>
        <div id="resizer" class="rc-resizercontent"></div> <!--onclick="Resize"-->
        <main>
            <div class="top-row">                                    
                @foreach (var pagina in paginasAbiertas.Paginas)
                {
                    <div @onclick="() => cambiarPestaña(pagina)" class="rc-pestana">
                        @pagina.Nombre
                        <span class="rc-cerrarventana oi-x" style="@("display:" + (pagina.Numero == 1 ? "none": "inherit"))" @onclick="() => CerrarVentana(pagina)"></span>
                    </div>
                }            
            </div>
            <article class="content px-4">
                <DynamicComponent Type="paginaActual.TypePaginaActual" Parameters="@(new Dictionary<string, object>{{"NumeroDePagina", paginaActual.Numero}})"/> 
            </article>
        </main>
    </div>    
</div>

@code {

    protected override void OnInitialized()
    {                
        // if the OnChange event is raised, refresh this view
        paginaActual.OnChange += () => StateHasChanged();       
        base.OnInitialized();
    }

    private void cambiarPestaña(Pagina pagina)
    {
        paginaActual.cambiarVentana(pagina);
    }   

    private void CerrarVentana(Pagina pagina)
    {
        paginasAbiertas.Paginas.Remove(pagina);
        paginaActual.cambiarVentana(paginasAbiertas.Paginas.Last());
        paginasAbiertas.Estado.Remove(pagina.Numero);
    }
}